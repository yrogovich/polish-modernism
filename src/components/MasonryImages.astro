---
import { Image } from 'astro:assets'

const { images } = Astro.props;

const generateRandomSize = (possibleSizes = ['small', 'medium', 'large']) => {
  return possibleSizes[Math.floor(Math.random() * possibleSizes.length)];
}

const randomizeImagesOrder = (images) => {
  return images.sort(() => Math.random() - 0.5);
}

---

<section>
  <div class="container">
    <div class="grid">
      {randomizeImagesOrder(images).map(({
        image,
        name,
        years,
        architect,
        location,
      }, index) => {
        const isDivisibleBy2 = (index + 1) % 2 === 0;
        const isDivisibleBy3 = (index + 1) % 3 === 0;

        const marginTop =
          isDivisibleBy2 ? '5rem' : isDivisibleBy3 ? '10rem' : '0px';

        return (
          <>
            <div class="image" data-size={generateRandomSize()} style={{marginTop}}>
              <Image src={image} alt={name} width="910" height="910"/>
              <div class="image__hover">
                <h2>{name}</h2>
                <p>{years}</p>
                <p>{architect}</p>
                <p>{location}</p>
              </div>
            </div>
            {isDivisibleBy3 && <div class="spacing" data-size={generateRandomSize()}></div>}
          </>
        )
      })}
    </div>
  </div>
</section>

<style lang="scss">
  .grid {
    padding-top: 50vh;
    padding-bottom: 50vh;

    display: grid;
    align-items: flex-start;
    grid-template-columns: repeat(30, 1fr);
    grid-column-gap: 2rem;
    @include fluid-spacing('grid-row-gap', 100, 200);

    @include rwd(tablet) {
      grid-template-columns: repeat(12, 1fr);
    }

    @include rwd(mobile) {
      grid-gap: 10rem 2rem;
    }
  }

  .image {
    position: relative;
    cursor: pointer;

    img {
      width: 100%;
      height: auto;
    }

    &[data-size="small"] {
      font-size: 1rem;
      grid-column: span 6;
      @include rwd(tablet) {
        grid-column: span 3;
      }
      @include rwd(mobile) {
        grid-column: span 6;
      }
    }
    &[data-size="medium"] {
      font-size: 1.8rem;
      grid-column: span 10;
      @include rwd(tablet) {
        grid-column: span 4;
      }
      @include rwd(mobile) {
        grid-column: span 6;
      }
    }
    &[data-size="large"] {
      font-size: 1.8rem;
      grid-column: span 15;
      @include rwd(tablet) {
        grid-column: span 12;
        margin-top: 0!important;
      }
    }

    &__hover {
      @include rwd(mobile) {
        display: none;
      }
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;

      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;

      opacity: 0;
      transition: opacity 0.3s ease-in-out;

      > * {
        font-style: normal;
        font-weight: 500;
        line-height: normal;
        letter-spacing: -0.018rem;
        text-transform: uppercase;
        color: $c-black;
        background-color: $c-text;
        @include fluid-spacing('padding', 5, 10);
      }

      &:hover {
        opacity: 1;
      }
    }
  }

  .spacing {
    &[data-size="small"] {
      grid-column: span 2;
      @include rwd(tablet) {
        grid-column: span 6;
      }
    }
    &[data-size="medium"] {
      grid-column: span 3;
      @include rwd(tablet) {
        grid-column: span 6;
      }
    }
    &[data-size="large"] {
      grid-column: span 4;
      @include rwd(tablet) {
        grid-column: span 6;
      }
    }
  }
</style>